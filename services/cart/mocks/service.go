// Code generated by MockGen. DO NOT EDIT.
// Source: service.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	models "api.trafilea.com/models"
	gomock "github.com/golang/mock/gomock"
)

// MockShoppingCartService is a mock of ShoppingCartService interface.
type MockShoppingCartService struct {
	ctrl     *gomock.Controller
	recorder *MockShoppingCartServiceMockRecorder
}

// MockShoppingCartServiceMockRecorder is the mock recorder for MockShoppingCartService.
type MockShoppingCartServiceMockRecorder struct {
	mock *MockShoppingCartService
}

// NewMockShoppingCartService creates a new mock instance.
func NewMockShoppingCartService(ctrl *gomock.Controller) *MockShoppingCartService {
	mock := &MockShoppingCartService{ctrl: ctrl}
	mock.recorder = &MockShoppingCartServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockShoppingCartService) EXPECT() *MockShoppingCartServiceMockRecorder {
	return m.recorder
}

// AddProductToCart mocks base method.
func (m *MockShoppingCartService) AddProductToCart(userId, cartId string, productInput models.ProductInput) (models.ListProducts, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddProductToCart", userId, cartId, productInput)
	ret0, _ := ret[0].(models.ListProducts)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddProductToCart indicates an expected call of AddProductToCart.
func (mr *MockShoppingCartServiceMockRecorder) AddProductToCart(userId, cartId, productInput interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddProductToCart", reflect.TypeOf((*MockShoppingCartService)(nil).AddProductToCart), userId, cartId, productInput)
}

// CreateOrder mocks base method.
func (m *MockShoppingCartService) CreateOrder(userId string) (*models.OrderResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrder", userId)
	ret0, _ := ret[0].(*models.OrderResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOrder indicates an expected call of CreateOrder.
func (mr *MockShoppingCartServiceMockRecorder) CreateOrder(userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrder", reflect.TypeOf((*MockShoppingCartService)(nil).CreateOrder), userId)
}

// CreateShoppingCart mocks base method.
func (m *MockShoppingCartService) CreateShoppingCart(userId string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateShoppingCart", userId)
	ret0, _ := ret[0].(string)
	return ret0
}

// CreateShoppingCart indicates an expected call of CreateShoppingCart.
func (mr *MockShoppingCartServiceMockRecorder) CreateShoppingCart(userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateShoppingCart", reflect.TypeOf((*MockShoppingCartService)(nil).CreateShoppingCart), userId)
}

// UpdateQuantity mocks base method.
func (m *MockShoppingCartService) UpdateQuantity(userId, cartId, productId string, payload models.UpdateQuantity) (*models.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateQuantity", userId, cartId, productId, payload)
	ret0, _ := ret[0].(*models.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateQuantity indicates an expected call of UpdateQuantity.
func (mr *MockShoppingCartServiceMockRecorder) UpdateQuantity(userId, cartId, productId, payload interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateQuantity", reflect.TypeOf((*MockShoppingCartService)(nil).UpdateQuantity), userId, cartId, productId, payload)
}
