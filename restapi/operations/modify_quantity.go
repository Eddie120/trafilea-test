// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// ModifyQuantityHandlerFunc turns a function with the right signature into a modify quantity handler
type ModifyQuantityHandlerFunc func(ModifyQuantityParams) middleware.Responder

// Handle executing the request and returning a response
func (fn ModifyQuantityHandlerFunc) Handle(params ModifyQuantityParams) middleware.Responder {
	return fn(params)
}

// ModifyQuantityHandler interface for that can handle valid modify quantity params
type ModifyQuantityHandler interface {
	Handle(ModifyQuantityParams) middleware.Responder
}

// NewModifyQuantity creates a new http.Handler for the modify quantity operation
func NewModifyQuantity(ctx *middleware.Context, handler ModifyQuantityHandler) *ModifyQuantity {
	return &ModifyQuantity{Context: ctx, Handler: handler}
}

/*
ModifyQuantity swagger:route PATCH /users/{userId}/carts/{cartId}/products/{productId}/ modifyQuantity

Modify quantity for a product
*/
type ModifyQuantity struct {
	Context *middleware.Context
	Handler ModifyQuantityHandler
}

func (o *ModifyQuantity) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewModifyQuantityParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
