// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Product product
//
// swagger:model Product
type Product struct {

	// product category
	// Enum: [Coffee Equipment Accessories]
	Category string `json:"category,omitempty"`

	// product name
	Name string `json:"name,omitempty"`

	// product price
	Price float64 `json:"price,omitempty"`

	// product id
	ProductID string `json:"product_id,omitempty"`

	// quantity
	Quantity float64 `json:"quantity,omitempty"`
}

// Validate validates this product
func (m *Product) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCategory(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var productTypeCategoryPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Coffee","Equipment","Accessories"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		productTypeCategoryPropEnum = append(productTypeCategoryPropEnum, v)
	}
}

const (

	// ProductCategoryCoffee captures enum value "Coffee"
	ProductCategoryCoffee string = "Coffee"

	// ProductCategoryEquipment captures enum value "Equipment"
	ProductCategoryEquipment string = "Equipment"

	// ProductCategoryAccessories captures enum value "Accessories"
	ProductCategoryAccessories string = "Accessories"
)

// prop value enum
func (m *Product) validateCategoryEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, productTypeCategoryPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *Product) validateCategory(formats strfmt.Registry) error {

	if swag.IsZero(m.Category) { // not required
		return nil
	}

	// value enum
	if err := m.validateCategoryEnum("category", "body", m.Category); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Product) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Product) UnmarshalBinary(b []byte) error {
	var res Product
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
